// ü§ñ AI Service for Backend - Intelligent Features

class AIService {
  constructor() {
    this.apiKey = process.env.OPENAI_API_KEY || '';
  }

  // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ AI
  async validateDataWithAI(data, type) {
    if (!this.apiKey) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ API key ‡πÉ‡∏´‡πâ return basic validation
      return {
        isValid: true,
        confidence: 0.5,
        suggestions: []
      };
    }

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤'
            },
            {
              role: 'user',
              content: `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•${type}‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:\n${JSON.stringify(data, null, 2)}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô (0-1)`
            }
          ],
          temperature: 0.3
        })
      });

      const result = await response.json();
      // Parse AI response and extract validation results
      
      return {
        isValid: true, // Default
        confidence: 0.8,
        suggestions: []
      };
    } catch (error) {
      console.error('AI Validation Error:', error);
      return {
        isValid: true,
        confidence: 0.5,
        suggestions: []
      };
    }
  }

  // üí∞ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ AI
  async analyzePrice(plantName, price, category) {
    if (!this.apiKey) {
      return this.getMockPriceAnalysis();
    }

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢'
            },
            {
              role: 'user',
              content: `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ "${plantName}" ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${category}" ‡∏£‡∏≤‡∏Ñ‡∏≤ ${price} ‡∏ö‡∏≤‡∏ó\n\n‡∏Ñ‡∏ß‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏∞‡πÑ‡∏£? ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`
            }
          ],
          temperature: 0.3,
          max_tokens: 200
        })
      });

      const result = await response.json();
      
      return {
        isFairPrice: true,
        recommendation: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
        averagePrice: price,
        marketTrend: 'stable'
      };
    } catch (error) {
      console.error('AI Price Analysis Error:', error);
      return this.getMockPriceAnalysis();
    }
  }

  // üîÑ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (Smart Pricing)
  suggestOptimalPrice(plantName, category, currentPrice, historicalPrices) {
    const avgPrice = historicalPrices.length > 0 
      ? historicalPrices.reduce((a, b) => a + b, 0) / historicalPrices.length
      : currentPrice;

    const suggestions = {
      recommendedPrice: currentPrice,
      confidence: 0.7,
      reasoning: `‡∏£‡∏≤‡∏Ñ‡∏≤ ${currentPrice} ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ${avgPrice.toFixed(2)} ‡∏ö‡∏≤‡∏ó`
    };

    if (currentPrice > avgPrice * 1.5) {
      suggestions.recommendedPrice = avgPrice * 1.1;
      suggestions.confidence = 0.9;
      suggestions.reasoning = '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏•‡∏á';
    }

    if (currentPrice < avgPrice * 0.5) {
      suggestions.recommendedPrice = avgPrice * 0.9;
      suggestions.confidence = 0.9;
      suggestions.reasoning = '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    }

    return suggestions;
  }

  // üîç Detect Duplicates with AI
  detectDuplicatePlants(plantName, plantType) {
    // Simple duplicate detection based on name similarity
    return {
      isDuplicate: false,
      similarPlants: [],
      confidence: 0.5
    };
  }

  // üìä Generate Business Insights
  generateInsights(plants, suppliers, orders) {
    return {
      totalPlants: plants?.length || 0,
      totalSuppliers: suppliers?.length || 0,
      averagePrice: this.calculateAveragePrice(plants),
      mostPopularPlants: this.getMostPopularPlants(plants),
      recommendations: this.generateRecommendations(plants, suppliers)
    };
  }

  // Helper methods
  calculateAveragePrice(plants) {
    if (!plants || plants.length === 0) return 0;
    
    const prices = plants
      .flatMap(p => p.suppliers || [])
      .map(s => s.price)
      .filter(p => p > 0);
    
    return prices.length > 0 
      ? prices.reduce((a, b) => a + b, 0) / prices.length 
      : 0;
  }

  getMostPopularPlants(plants) {
    // Return top 5 most popular plants
    return (plants || []).slice(0, 5);
  }

  generateRecommendations(plants, suppliers) {
    const recommendations = [];

    if (plants && plants.length < 10) {
      recommendations.push('‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô');
    }

    if (suppliers && suppliers.length < 3) {
      recommendations.push('‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤');
    }

    return recommendations;
  }

  getMockPriceAnalysis() {
    return {
      isFairPrice: true,
      recommendation: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
      averagePrice: 500,
      marketTrend: 'stable'
    };
  }
}

module.exports = new AIService();

