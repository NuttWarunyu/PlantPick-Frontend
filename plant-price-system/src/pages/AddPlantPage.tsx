import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft, Save, Store, Search, Plus, Bot, Zap, AlertCircle } from 'lucide-react';

interface Supplier {
  id: string;
  name: string;
  location: string;
  phone: string;
  specialties?: string[];
}

const AddPlantPage: React.FC = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [plantData, setPlantData] = useState({
    name: '',
    scientificName: '',
    category: '',
    plantType: '',
    measurementType: '',
    description: ''
  });
  const [supplierData, setSupplierData] = useState({
    supplierId: '',
    price: '',
    size: '',
    stockQuantity: '',
    notes: ''
  });
  const [addSupplier, setAddSupplier] = useState(false);
  const [supplierSearchTerm, setSupplierSearchTerm] = useState('');
  const [aiSuggestions, setAiSuggestions] = useState<string[]>([]);
  const [duplicateCheck, setDuplicateCheck] = useState<{isDuplicate: boolean, similarPlants: any[]}>({isDuplicate: false, similarPlants: []});
  const [suppliersToShow, setSuppliersToShow] = useState<Supplier[]>([]);

  useEffect(() => {
    loadSuppliers();
  }, []);

  useEffect(() => {
    let filtered = suppliers;

    // Filter by search term
    if (supplierSearchTerm) {
      filtered = filtered.filter(supplier =>
        supplier.name.toLowerCase().includes(supplierSearchTerm.toLowerCase()) ||
        supplier.location.toLowerCase().includes(supplierSearchTerm.toLowerCase())
      );
    }

    // Filter by plant type specialty
    if (plantData.plantType && plantData.plantType !== '') {
      filtered = filtered.filter(supplier =>
        !supplier.specialties || supplier.specialties.includes(plantData.plantType)
      );
    }

    setSuppliersToShow(filtered);
  }, [suppliers, supplierSearchTerm, plantData.plantType]);

  useEffect(() => {
    // AI Data Entry Helper - Auto-complete and suggestions
    if (plantData.name) {
      generateAISuggestions();
      checkForDuplicates();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [plantData.name, plantData.plantType]);

  const loadSuppliers = async () => {
    try {
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
      const storedSuppliers = localStorage.getItem('suppliers');
      if (storedSuppliers) {
        const suppliers = JSON.parse(storedSuppliers);
        setSuppliers(suppliers);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        setSuppliers([
          {
            id: 'supplier_1',
            name: '‡∏£‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á A',
            location: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
            phone: '081-234-5678',
            specialties: ['‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö', '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°']
          },
          {
            id: 'supplier_2', 
            name: '‡∏£‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á B',
            location: '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°',
            phone: '082-345-6789',
            specialties: ['‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å', '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™']
          }
        ]);
      }
    } catch (error) {
      console.error('Error loading suppliers:', error);
    }
  };

  const generateAISuggestions = () => {
    const suggestions: string[] = [];
    
    // Auto-complete suggestions for plant name
    if (plantData.name && plantData.name.length > 2) {
      const existingPlants = JSON.parse(localStorage.getItem('plantsData') || '[]');
      const similarNames = existingPlants
        .filter((plant: any) => 
          plant.name.toLowerCase().includes(plantData.name.toLowerCase()) ||
          plant.scientificName.toLowerCase().includes(plantData.name.toLowerCase())
        )
        .slice(0, 3)
        .map((plant: any) => plant.name);
      
      if (similarNames.length > 0) {
        suggestions.push(`üí° ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô: ${similarNames.join(', ')}`);
      }
    }
    
    // Price suggestions based on plant type
    if (plantData.plantType && supplierData.price) {
      const price = parseFloat(supplierData.price);
      const suggestions = getPriceSuggestions(plantData.plantType, price);
      if (suggestions.length > 0) {
        suggestions.push(...suggestions);
      }
    }
    
    // Size suggestions
    if (plantData.plantType && !supplierData.size) {
      const sizeSuggestions = getSizeSuggestions(plantData.plantType);
      if (sizeSuggestions.length > 0) {
        suggestions.push(`üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${sizeSuggestions.join(', ')}`);
      }
    }
    
    setAiSuggestions(suggestions);
  };

  const checkForDuplicates = () => {
    if (!plantData.name || plantData.name.length < 3) return;
    
    const existingPlants = JSON.parse(localStorage.getItem('plantsData') || '[]');
    const similarPlants = existingPlants.filter((plant: any) => 
      plant.name.toLowerCase() === plantData.name.toLowerCase() ||
      plant.scientificName.toLowerCase() === plantData.scientificName.toLowerCase()
    );
    
    setDuplicateCheck({
      isDuplicate: similarPlants.length > 0,
      similarPlants: similarPlants
    });
  };

  const getPriceSuggestions = (plantType: string, currentPrice: number): string[] => {
    const suggestions: string[] = [];
    
    // Price ranges for different plant types
    const priceRanges: { [key: string]: { min: number; max: number; avg: number } } = {
      '‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö': { min: 50, max: 2000, avg: 500 },
      '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°': { min: 200, max: 5000, avg: 1000 },
      '‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô': { min: 20, max: 200, avg: 80 },
      '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å': { min: 30, max: 800, avg: 200 },
      '‡πÑ‡∏°‡πâ‡πÉ‡∏ö': { min: 100, max: 3000, avg: 800 },
      '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™': { min: 50, max: 1500, avg: 300 },
      '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã': { min: 500, max: 10000, avg: 2000 },
      '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ': { min: 100, max: 2000, avg: 600 }
    };
    
    const range = priceRanges[plantType];
    if (range) {
      if (currentPrice < range.min) {
        suggestions.push(`üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ - ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ${plantType}: ${range.avg} ‡∏ö‡∏≤‡∏ó`);
      } else if (currentPrice > range.max) {
        suggestions.push(`üí∏ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ - ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ${plantType}: ${range.avg} ‡∏ö‡∏≤‡∏ó`);
      } else {
        suggestions.push(`‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥ - ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ${plantType}: ${range.avg} ‡∏ö‡∏≤‡∏ó`);
      }
    }
    
    return suggestions;
  };

  const getSizeSuggestions = (plantType: string): string[] => {
    const sizeSuggestions: { [key: string]: string[] } = {
      '‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö': ['S', 'M', 'L', '1-2 ‡∏ü‡∏∏‡∏ï', '2-3 ‡∏ü‡∏∏‡∏ï'],
      '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°': ['1-2 ‡πÄ‡∏°‡∏ï‡∏£', '2-3 ‡πÄ‡∏°‡∏ï‡∏£', '3-4 ‡πÄ‡∏°‡∏ï‡∏£'],
      '‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô': ['3 ‡∏ô‡∏¥‡πâ‡∏ß', '4 ‡∏ô‡∏¥‡πâ‡∏ß', '6 ‡∏ô‡∏¥‡πâ‡∏ß'],
      '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å': ['3 ‡∏ô‡∏¥‡πâ‡∏ß', '4 ‡∏ô‡∏¥‡πâ‡∏ß', '6 ‡∏ô‡∏¥‡πâ‡∏ß', '8 ‡∏ô‡∏¥‡πâ‡∏ß'],
      '‡πÑ‡∏°‡πâ‡πÉ‡∏ö': ['S', 'M', 'L', '1-2 ‡∏ü‡∏∏‡∏ï'],
      '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™': ['3 ‡∏ô‡∏¥‡πâ‡∏ß', '4 ‡∏ô‡∏¥‡πâ‡∏ß', '6 ‡∏ô‡∏¥‡πâ‡∏ß'],
      '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã': ['S', 'M', 'L', 'Mini'],
      '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ': ['3 ‡∏ô‡∏¥‡πâ‡∏ß', '4 ‡∏ô‡∏¥‡πâ‡∏ß', '6 ‡∏ô‡∏¥‡πâ‡∏ß']
    };
    
    return sizeSuggestions[plantType] || [];
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setPlantData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSupplierInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setSupplierData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô localStorage
      const newPlant = {
        id: `plant_${Date.now()}`,
        name: plantData.name,
        scientificName: plantData.scientificName,
        category: plantData.category,
        plantType: plantData.plantType,
        measurementType: plantData.measurementType,
        description: plantData.description,
        suppliers: [],
        hasSuppliers: false
      };

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô localStorage
      const existingPlants = JSON.parse(localStorage.getItem('plantsData') || '[]');
      existingPlants.push(newPlant);
      localStorage.setItem('plantsData', JSON.stringify(existingPlants));

      // 2. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
      if (addSupplier && supplierData.supplierId && supplierData.price) {
        const selectedSupplier = suppliers.find(s => s.id === supplierData.supplierId);
        if (selectedSupplier) {
          const supplierConnection = {
            id: `supplier_${Date.now()}`,
            name: selectedSupplier.name,
            price: parseFloat(supplierData.price),
            phone: selectedSupplier.phone,
            location: selectedSupplier.location,
            lastUpdated: new Date().toISOString(),
            size: supplierData.size || undefined
          };

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô localStorage
          const updatedPlants = JSON.parse(localStorage.getItem('plantsData') || '[]');
          const plantIndex = updatedPlants.findIndex((p: any) => p.id === newPlant.id);
          if (plantIndex !== -1) {
            updatedPlants[plantIndex].suppliers.push(supplierConnection);
            updatedPlants[plantIndex].hasSuppliers = true;
            localStorage.setItem('plantsData', JSON.stringify(updatedPlants));
          }
        }
      }

      alert('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      navigate('/');
    } catch (error) {
      console.error('Error adding plant:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4">
            <button
              onClick={() => navigate('/')}
              className="flex items-center space-x-2 text-gray-600 hover:text-gray-800"
            >
              <ArrowLeft className="w-5 h-5" />
              <span>‡∏Å‡∏•‡∏±‡∏ö</span>
            </button>
            <h1 className="text-3xl font-bold text-gray-900">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ</h1>
          </div>
        </div>

        {/* Form */}
        <div className="bg-white rounded-lg shadow-md p-8">
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Basic Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ *
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={plantData.name}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡πâ‡∏ô‡∏¢‡∏≤‡∏á‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢"
                />
              </div>

              <div>
                <label htmlFor="scientificName" className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
                </label>
                <input
                  type="text"
                  id="scientificName"
                  name="scientificName"
                  value={plantData.scientificName}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô Ficus elastica"
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà *
                </label>
                <select
                  id="category"
                  name="category"
                  value={plantData.category}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
                  <option value="‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö">‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö</option>
                  <option value="‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°">‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°</option>
                  <option value="‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô">‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô</option>
                  <option value="‡πÑ‡∏°‡πâ‡∏ú‡∏•">‡πÑ‡∏°‡πâ‡∏ú‡∏•</option>
                  <option value="‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å">‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å</option>
                </select>
              </div>

              <div>
                <label htmlFor="plantType" className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó *
                </label>
                <select
                  id="plantType"
                  name="plantType"
                  value={plantData.plantType}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
                  <option value="‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö">‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö</option>
                  <option value="‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°">‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°</option>
                  <option value="‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô">‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô</option>
                  <option value="‡πÑ‡∏°‡πâ‡∏ú‡∏•">‡πÑ‡∏°‡πâ‡∏ú‡∏•</option>
                  <option value="‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å">‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å</option>
                </select>
              </div>

              <div>
                <label htmlFor="measurementType" className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏±‡∏î *
                </label>
                <select
                  id="measurementType"
                  name="measurementType"
                  value={plantData.measurementType}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏±‡∏î</option>
                  <option value="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á</option>
                  <option value="‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡∏ß‡∏á">‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡∏ß‡∏á</option>
                  <option value="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö</option>
                  <option value="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å">‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</option>
                </select>
              </div>
            </div>

            {/* AI Suggestions */}
            {(aiSuggestions.length > 0 || duplicateCheck.isDuplicate) && (
              <div className="bg-blue-50 rounded-lg border border-blue-200 p-4">
                <div className="flex items-center gap-2 mb-3">
                  <Bot className="h-5 w-5 text-blue-600" />
                  <h4 className="font-medium text-blue-800">ü§ñ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å AI</h4>
                </div>
                
                {/* Duplicate Warning */}
                {duplicateCheck.isDuplicate && (
                  <div className="mb-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                    <div className="flex items-start gap-2">
                      <AlertCircle className="h-4 w-4 text-red-500 mt-0.5 flex-shrink-0" />
                      <div>
                        <p className="text-sm font-medium text-red-800">‚ö†Ô∏è ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥!</p>
                        <p className="text-sm text-red-700">
                          ‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ä‡∏∑‡πà‡∏≠ "{plantData.name}" ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                        </p>
                        {duplicateCheck.similarPlants.length > 0 && (
                          <div className="mt-2">
                            <p className="text-xs text-red-600">‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô:</p>
                            <ul className="text-xs text-red-600 list-disc list-inside">
                              {duplicateCheck.similarPlants.slice(0, 3).map((plant: any, index: number) => (
                                <li key={index}>{plant.name} ({plant.category})</li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )}
                
                {/* AI Suggestions */}
                {aiSuggestions.length > 0 && (
                  <div className="space-y-2">
                    {aiSuggestions.map((suggestion, index) => (
                      <div key={index} className="flex items-start gap-2 p-2 bg-white rounded border border-blue-200">
                        <Zap className="h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0" />
                        <span className="text-sm text-blue-800">{suggestion}</span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            <div>
              <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
                ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
              </label>
              <textarea
                id="description"
                name="description"
                value={plantData.description}
                onChange={handleInputChange}
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ..."
              />
            </div>

            {/* Supplier Section */}
            <div className="border-t border-gray-200 pt-6">
              <div className="flex items-center space-x-3 mb-4">
                <Store className="w-6 h-6 text-blue-600" />
                <h3 className="text-lg font-semibold text-gray-900">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</h3>
              </div>
              
              <div className="flex items-center space-x-3 mb-4">
                <input
                  type="checkbox"
                  id="addSupplier"
                  checked={addSupplier}
                  onChange={(e) => setAddSupplier(e.target.checked)}
                  className="w-4 h-4 text-green-600 border-gray-300 rounded focus:ring-green-500"
                />
                <label htmlFor="addSupplier" className="text-sm font-medium text-gray-700">
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤
                </label>
              </div>

              {addSupplier && (
                <div className="space-y-4 bg-gray-50 p-4 rounded-lg">
                  {/* Supplier Search */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
                    </label>
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <input
                        type="text"
                        value={supplierSearchTerm}
                        onChange={(e) => setSupplierSearchTerm(e.target.value)}
                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà..."
                      />
                    </div>
                    
                    {/* Supplier List */}
                    <div className="mt-3 max-h-40 overflow-y-auto border border-gray-200 rounded-md">
                      {suppliersToShow.length > 0 ? (
                        suppliersToShow.map(supplier => (
                          <div
                            key={supplier.id}
                            className={`p-3 cursor-pointer hover:bg-green-50 border-b border-gray-100 ${
                              supplierData.supplierId === supplier.id ? 'bg-green-100 border-green-300' : ''
                            }`}
                            onClick={() => setSupplierData(prev => ({ ...prev, supplierId: supplier.id }))}
                          >
                            <div className="flex items-center justify-between">
                              <div>
                                <div className="font-medium text-gray-900">{supplier.name}</div>
                                <div className="text-sm text-gray-600">{supplier.location}</div>
                                <div className="text-xs text-gray-500">{supplier.phone}</div>
                              </div>
                              {supplier.specialties && (
                                <div className="flex flex-wrap gap-1">
                                  {supplier.specialties.slice(0, 2).map(specialty => (
                                    <span key={specialty} className="px-2 py-1 text-xs bg-green-100 text-green-800 rounded">
                                      {specialty}
                                    </span>
                                  ))}
                                </div>
                              )}
                            </div>
                          </div>
                        ))
                      ) : (
                        <div className="p-4 text-center text-gray-500">
                          ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
                          <div className="mt-2">
                            <button
                              type="button"
                              onClick={() => navigate('/add-supplier')}
                              className="text-green-600 hover:text-green-700 text-sm font-medium"
                            >
                              <Plus className="w-4 h-4 inline mr-1" />
                              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
                            </button>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="price" className="block text-sm font-medium text-gray-700 mb-2">
                        ‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó) *
                      </label>
                      <input
                        type="number"
                        id="price"
                        name="price"
                        value={supplierData.price}
                        onChange={handleSupplierInputChange}
                        min="0"
                        step="0.01"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 150"
                      />
                    </div>

                    <div>
                      <label htmlFor="size" className="block text-sm font-medium text-gray-700 mb-2">
                        ‡πÑ‡∏ã‡∏ï‡πå‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
                      </label>
                      <input
                        type="text"
                        id="size"
                        name="size"
                        value={supplierData.size}
                        onChange={handleSupplierInputChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 1-2 ‡∏ü‡∏∏‡∏ï, S, M, L"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="stockQuantity" className="block text-sm font-medium text-gray-700 mb-2">
                        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
                      </label>
                      <input
                        type="number"
                        id="stockQuantity"
                        name="stockQuantity"
                        value={supplierData.stockQuantity}
                        onChange={handleSupplierInputChange}
                        min="0"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 50"
                      />
                    </div>

                    <div>
                      <label htmlFor="notes" className="block text-sm font-medium text-gray-700 mb-2">
                        ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
                      </label>
                      <input
                        type="text"
                        id="notes"
                        name="notes"
                        value={supplierData.notes}
                        onChange={handleSupplierInputChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
                      />
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Submit Button */}
            <div className="flex justify-end space-x-4">
              <button
                type="button"
                onClick={() => navigate('/')}
                className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                type="submit"
                disabled={isLoading}
                className="flex items-center space-x-2 px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50"
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...</span>
                  </>
                ) : (
                  <>
                    <Save className="w-4 h-4" />
                    <span>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default AddPlantPage;
