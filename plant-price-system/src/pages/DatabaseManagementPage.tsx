// üóÑÔ∏è Database Management Page - ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£

import React, { useState, useEffect } from 'react';
import { 
  Database, 
  Upload, 
  Download, 
  Trash2, 
  RefreshCw, 
  Search, 
  Filter,
  AlertTriangle,
  CheckCircle,
  XCircle,
  FileText,
  HardDrive,
  Settings,
  BarChart3,
  Save,
  RotateCcw
} from 'lucide-react';
import { databaseService, DatabaseStats, BulkUpdateResult, ImportResult, BackupData } from '../services/databaseService';
import { testDataManager } from '../utils/testDataManager';

const DatabaseManagementPage: React.FC = () => {
  const [stats, setStats] = useState<DatabaseStats | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState<{ type: 'success' | 'error' | 'info', text: string } | null>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [backups, setBackups] = useState<BackupData[]>([]);
  const [showBulkUpdate, setShowBulkUpdate] = useState(false);
  const [bulkUpdateData, setBulkUpdateData] = useState('');

  useEffect(() => {
    loadStats();
    loadBackups();
  }, []);

  const loadStats = () => {
    const databaseStats = databaseService.getDatabaseStats();
    setStats(databaseStats);
  };

  const loadBackups = () => {
    const backupList = databaseService.getBackups();
    setBackups(backupList);
  };

  const showMessage = (type: 'success' | 'error' | 'info', text: string) => {
    setMessage({ type, text });
    setTimeout(() => setMessage(null), 5000);
  };

  // üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleRefreshStats = () => {
    loadStats();
    showMessage('info', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß');
  };

  // üíæ Backup Operations
  const handleCreateBackup = async () => {
    setIsLoading(true);
    try {
      const success = databaseService.createBackup();
      if (success) {
        showMessage('success', '‡∏™‡∏£‡πâ‡∏≤‡∏á Backup ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        loadBackups();
      } else {
        showMessage('error', '‡∏™‡∏£‡πâ‡∏≤‡∏á Backup ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      }
    } catch (error) {
      showMessage('error', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleRestoreBackup = async (backup: BackupData) => {
    if (!window.confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ${new Date(backup.timestamp).toLocaleString()}?`)) {
      return;
    }

    setIsLoading(true);
    try {
      const success = databaseService.restoreBackup(backup);
      if (success) {
        showMessage('success', '‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        loadStats();
        loadBackups();
      } else {
        showMessage('error', '‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      }
    } catch (error) {
      showMessage('error', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  // üì• Export Data
  const handleExportData = () => {
    try {
      const data = databaseService.exportData();
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `plant-database-backup-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      showMessage('success', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      showMessage('error', `‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error}`);
    }
  };

  // üì§ Import Data
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedFile(file);
    }
  };

  const handleImportData = async () => {
    if (!selectedFile) {
      showMessage('error', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå');
      return;
    }

    setIsLoading(true);
    try {
      const text = await selectedFile.text();
      const data = JSON.parse(text);
      const result: ImportResult = databaseService.importData(data);
      
      if (result.success > 0) {
        showMessage('success', `‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${result.success} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        loadStats();
        loadBackups();
      } else {
        showMessage('error', `‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${result.errors.join(', ')}`);
      }
    } catch (error) {
      showMessage('error', `‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${error}`);
    } finally {
      setIsLoading(false);
      setSelectedFile(null);
    }
  };

  // üîÑ Bulk Update
  const handleBulkUpdate = async () => {
    if (!bulkUpdateData.trim()) {
      showMessage('error', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      return;
    }

    setIsLoading(true);
    try {
      const updates = JSON.parse(bulkUpdateData);
      const result: BulkUpdateResult = databaseService.bulkUpdatePrices(updates);
      
      if (result.success > 0) {
        showMessage('success', `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤ ${result.success} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        loadStats();
      }
      
      if (result.failed > 0) {
        showMessage('error', `‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ${result.failed} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${result.errors.join(', ')}`);
      }
    } catch (error) {
      showMessage('error', `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${error}`);
    } finally {
      setIsLoading(false);
      setBulkUpdateData('');
      setShowBulkUpdate(false);
    }
  };

  // üßπ Maintenance
  const handleOptimizeDatabase = async () => {
    setIsLoading(true);
    try {
      const success = databaseService.optimizeDatabase();
      if (success) {
        showMessage('success', '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        loadStats();
      } else {
        showMessage('error', '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      }
    } catch (error) {
      showMessage('error', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleClearAllData = async () => {
    if (!window.confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ!')) {
      return;
    }

    setIsLoading(true);
    try {
      const success = databaseService.clearAllData();
      if (success) {
        showMessage('success', '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        loadStats();
        loadBackups();
      } else {
        showMessage('error', '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      }
    } catch (error) {
      showMessage('error', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  // üß™ Test Functions
  const handleCreateTestData = () => {
    testDataManager.createBasicTestData();
    showMessage('success', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    loadStats();
  };

  const handleCreateBulkTestData = () => {
    testDataManager.createBulkTestData();
    showMessage('success', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    loadStats();
  };

  const handleCreateBulkUpdateData = () => {
    const bulkData = testDataManager.createBulkUpdateTestData();
    setBulkUpdateData(bulkData);
    setShowBulkUpdate(true);
    showMessage('info', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bulk Update ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  };

  const handleCreateImportFile = () => {
    testDataManager.createImportTestFile();
    showMessage('success', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö Import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  };

  const handleRunAllTests = () => {
    testDataManager.runAllTests();
    showMessage('success', '‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    loadStats();
  };

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center space-x-3 mb-4">
          <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center">
            <Database className="text-white text-xl" />
          </div>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h1>
            <p className="text-gray-600">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢</p>
          </div>
        </div>

        {/* Message */}
        {message && (
          <div className={`mb-6 p-4 rounded-lg flex items-center space-x-2 ${
            message.type === 'success' ? 'bg-green-50 text-green-800 border border-green-200' :
            message.type === 'error' ? 'bg-red-50 text-red-800 border border-red-200' :
            'bg-blue-50 text-blue-800 border border-blue-200'
          }`}>
            {message.type === 'success' ? <CheckCircle className="h-5 w-5" /> :
             message.type === 'error' ? <XCircle className="h-5 w-5" /> :
             <AlertTriangle className="h-5 w-5" />}
            <span>{message.text}</span>
          </div>
        )}
      </div>

      {/* Stats Cards */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                <p className="text-2xl font-bold text-gray-900">{stats.totalPlants}</p>
              </div>
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                <BarChart3 className="h-6 w-6 text-green-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢</p>
                <p className="text-2xl font-bold text-gray-900">{stats.totalSuppliers}</p>
              </div>
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <Database className="h-6 w-6 text-blue-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</p>
                <p className="text-2xl font-bold text-gray-900">{stats.totalConnections}</p>
              </div>
              <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                <RefreshCw className="h-6 w-6 text-purple-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
                <p className="text-2xl font-bold text-gray-900">
                  {(stats.dataSize / 1024).toFixed(1)} KB
                </p>
              </div>
              <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                <HardDrive className="h-6 w-6 text-orange-600" />
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Main Actions */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Backup & Restore */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-900 flex items-center space-x-2">
              <Save className="h-5 w-5 text-blue-600" />
              <span>Backup & Restore</span>
            </h2>
          </div>
          <div className="p-6 space-y-4">
            <div className="flex space-x-3">
              <button
                onClick={handleCreateBackup}
                disabled={isLoading}
                className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center justify-center space-x-2"
              >
                <Save className="h-4 w-4" />
                <span>‡∏™‡∏£‡πâ‡∏≤‡∏á Backup</span>
              </button>
              <button
                onClick={handleExportData}
                className="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center justify-center space-x-2"
              >
                <Download className="h-4 w-4" />
                <span>Export</span>
              </button>
            </div>

            {/* Backup List */}
            <div className="space-y-2">
              <h3 className="font-medium text-gray-900">Backup ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:</h3>
              {backups.length === 0 ? (
                <p className="text-gray-500 text-sm">‡πÑ‡∏°‡πà‡∏°‡∏µ Backup</p>
              ) : (
                <div className="space-y-2 max-h-40 overflow-y-auto">
                  {backups.slice().reverse().map((backup, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div>
                        <p className="text-sm font-medium text-gray-900">
                          {new Date(backup.timestamp).toLocaleString()}
                        </p>
                        <p className="text-xs text-gray-500">
                          {backup.metadata.totalRecords} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                        </p>
                      </div>
                      <button
                        onClick={() => handleRestoreBackup(backup)}
                        disabled={isLoading}
                        className="text-blue-600 hover:text-blue-800 disabled:opacity-50 flex items-center space-x-1"
                      >
                        <RotateCcw className="h-4 w-4" />
                        <span className="text-sm">‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô</span>
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Import Data */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-900 flex items-center space-x-2">
              <Upload className="h-5 w-5 text-green-600" />
              <span>Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
            </h2>
          </div>
          <div className="p-6 space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
              </label>
              <input
                type="file"
                accept=".json"
                onChange={handleFileSelect}
                className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
              />
            </div>

            {selectedFile && (
              <div className="p-3 bg-green-50 rounded-lg">
                <p className="text-sm text-green-800">
                  ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {selectedFile.name}
                </p>
                <p className="text-xs text-green-600">
                  ‡∏Ç‡∏ô‡∏≤‡∏î: {(selectedFile.size / 1024).toFixed(1)} KB
                </p>
              </div>
            )}

            <button
              onClick={handleImportData}
              disabled={!selectedFile || isLoading}
              className="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center justify-center space-x-2"
            >
              <Upload className="h-4 w-4" />
              <span>Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
            </button>
          </div>
        </div>
      </div>

      {/* Bulk Update */}
      <div className="mt-8 bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900 flex items-center space-x-2">
            <RefreshCw className="h-5 w-5 text-purple-600" />
            <span>Bulk Update ‡∏£‡∏≤‡∏Ñ‡∏≤</span>
          </h2>
        </div>
        <div className="p-6">
          {!showBulkUpdate ? (
            <button
              onClick={() => setShowBulkUpdate(true)}
              className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 flex items-center space-x-2"
            >
              <RefreshCw className="h-4 w-4" />
              <span>‡πÄ‡∏õ‡∏¥‡∏î Bulk Update</span>
            </button>
          ) : (
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤:
                </label>
                <textarea
                  value={bulkUpdateData}
                  onChange={(e) => setBulkUpdateData(e.target.value)}
                  placeholder={`[
  {
    "plantId": "plant_1",
    "supplierId": "supplier_1", 
    "newPrice": 500
  }
]`}
                  className="w-full h-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                />
              </div>
              <div className="flex space-x-3">
                <button
                  onClick={handleBulkUpdate}
                  disabled={isLoading}
                  className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 disabled:opacity-50 flex items-center space-x-2"
                >
                  <RefreshCw className="h-4 w-4" />
                  <span>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï</span>
                </button>
                <button
                  onClick={() => {
                    setShowBulkUpdate(false);
                    setBulkUpdateData('');
                  }}
                  className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700"
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Testing Tools */}
      <div className="mt-8 bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900 flex items-center space-x-2">
            <Settings className="h-5 w-5 text-purple-600" />
            <span>‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö</span>
          </h2>
        </div>
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <button
              onClick={handleCreateTestData}
              className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center justify-center space-x-2"
            >
              <Database className="h-4 w-4" />
              <span>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</span>
            </button>

            <button
              onClick={handleCreateBulkTestData}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center justify-center space-x-2"
            >
              <RefreshCw className="h-4 w-4" />
              <span>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å</span>
            </button>

            <button
              onClick={handleCreateBulkUpdateData}
              className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 flex items-center justify-center space-x-2"
            >
              <FileText className="h-4 w-4" />
              <span>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bulk Update</span>
            </button>

            <button
              onClick={handleCreateImportFile}
              className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 flex items-center justify-center space-x-2"
            >
              <Download className="h-4 w-4" />
              <span>‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö Import</span>
            </button>

            <button
              onClick={handleRunAllTests}
              className="bg-yellow-600 text-white px-4 py-2 rounded-lg hover:bg-yellow-700 flex items-center justify-center space-x-2"
            >
              <BarChart3 className="h-4 w-4" />
              <span>‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
            </button>

            <button
              onClick={handleClearAllData}
              disabled={isLoading}
              className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 disabled:opacity-50 flex items-center justify-center space-x-2"
            >
              <Trash2 className="h-4 w-4" />
              <span>‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
            </button>
          </div>
        </div>
      </div>

      {/* Maintenance */}
      <div className="mt-8 bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900 flex items-center space-x-2">
            <Settings className="h-5 w-5 text-orange-600" />
            <span>‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤</span>
          </h2>
        </div>
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button
              onClick={handleOptimizeDatabase}
              disabled={isLoading}
              className="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 disabled:opacity-50 flex items-center justify-center space-x-2"
            >
              <RefreshCw className="h-4 w-4" />
              <span>‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
            </button>

            <button
              onClick={handleRefreshStats}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center justify-center space-x-2"
            >
              <BarChart3 className="h-4 w-4" />
              <span>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DatabaseManagementPage;
