// üîÑ Bulk Data Generator - ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á

import { Plant, Supplier } from '../types';
import { databaseService } from '../services/databaseService';

export interface BulkDataOptions {
  plantCount: number;
  suppliersPerPlant: number;
  categories: string[];
  locations: string[];
  priceRange: { min: number; max: number };
}

export class BulkDataGenerator {
  private static instance: BulkDataGenerator;

  private constructor() {}

  public static getInstance(): BulkDataGenerator {
    if (!BulkDataGenerator.instance) {
      BulkDataGenerator.instance = new BulkDataGenerator();
    }
    return BulkDataGenerator.instance;
  }

  // üå± ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
  public generateBulkPlants(options: BulkDataOptions): Plant[] {
    const plants: Plant[] = [];
    const plantNames = this.getPlantNames();
    const scientificNames = this.getScientificNames();

    for (let i = 0; i < options.plantCount; i++) {
      const plantName = plantNames[i % plantNames.length];
      const scientificName = scientificNames[i % scientificNames.length];
      const category = options.categories[i % options.categories.length];
      
      const plant: Plant = {
        id: `plant_${Date.now()}_${i}`,
        name: `${plantName} ${i + 1}`,
        scientificName: `${scientificName} ${i + 1}`,
        category,
        plantType: this.getPlantTypeFromCategory(category),
        measurementType: this.getMeasurementTypeFromCategory(category),
        suppliers: this.generateSuppliersForPlant(options, i),
        hasSuppliers: true
      };

      plants.push(plant);
    }

    return plants;
  }

  // üè™ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
  private generateSuppliersForPlant(options: BulkDataOptions, plantIndex: number): Supplier[] {
    const suppliers: Supplier[] = [];
    const supplierNames = this.getSupplierNames();
    const phoneNumbers = this.generatePhoneNumbers(options.suppliersPerPlant);

    for (let i = 0; i < options.suppliersPerPlant; i++) {
      const supplier: Supplier = {
        id: `supplier_${Date.now()}_${plantIndex}_${i}`,
        name: supplierNames[i % supplierNames.length],
        price: this.generateRandomPrice(options.priceRange),
        phone: phoneNumbers[i],
        location: options.locations[i % options.locations.length],
        lastUpdated: this.generateRandomDate(),
        size: this.generateRandomSize()
      };

      suppliers.push(supplier);
    }

    return suppliers;
  }

  // üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Bulk Update
  public generateBulkUpdateData(plantCount: number, supplierCount: number): Array<{
    plantId: string;
    supplierId: string;
    newPrice: number;
  }> {
    const updates: Array<{
      plantId: string;
      supplierId: string;
      newPrice: number;
    }> = [];

    const plants = databaseService.getPlants();
    if (plants.length === 0) {
      throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
    }

    for (let i = 0; i < plantCount; i++) {
      const plant = plants[i % plants.length];
      if (plant.suppliers.length === 0) continue;

      for (let j = 0; j < Math.min(supplierCount, plant.suppliers.length); j++) {
        const supplier = plant.suppliers[j];
        updates.push({
          plantId: plant.id,
          supplierId: supplier.id,
          newPrice: this.generateRandomPrice({ min: 50, max: 2000 })
        });
      }
    }

    return updates;
  }

  // üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  public generateSampleDataByCategory(category: string, count: number): Plant[] {
    const options: BulkDataOptions = {
      plantCount: count,
      suppliersPerPlant: 3,
      categories: [category],
      locations: ['‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ'],
      priceRange: { min: 100, max: 1000 }
    };

    return this.generateBulkPlants(options);
  }

  // üìà ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  public generateStatisticsData(): {
    plants: Plant[];
    totalSuppliers: number;
    averagePrice: number;
    categoryDistribution: Record<string, number>;
  } {
    const plants = databaseService.getPlants();
    const allSuppliers: Supplier[] = [];
    let totalPrice = 0;
    let priceCount = 0;
    const categoryDistribution: Record<string, number> = {};

    plants.forEach(plant => {
      // ‡∏ô‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
      categoryDistribution[plant.category] = (categoryDistribution[plant.category] || 0) + 1;
      
      // ‡∏£‡∏ß‡∏°‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢
      plant.suppliers.forEach(supplier => {
        allSuppliers.push(supplier);
        totalPrice += supplier.price;
        priceCount++;
      });
    });

    return {
      plants,
      totalSuppliers: allSuppliers.length,
      averagePrice: priceCount > 0 ? totalPrice / priceCount : 0,
      categoryDistribution
    };
  }

  // Private helper methods
  private getPlantNames(): string[] {
    return [
      '‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πà‡∏≤', '‡πÑ‡∏ó‡∏£‡πÉ‡∏ö‡∏™‡∏±‡∏Å', '‡∏Å‡∏∏‡∏´‡∏•‡∏≤‡∏ö‡πÅ‡∏î‡∏á', '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™‡∏ö‡∏≠‡∏•', '‡πÑ‡∏ú‡πà‡∏™‡∏µ‡∏™‡∏∏‡∏Å',
      '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã‡πÑ‡∏ó‡∏£', '‡∏ü‡∏¥‡πÇ‡∏•‡πÄ‡∏î‡∏ô‡∏î‡∏£‡∏≠‡∏ô', '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ‡πÅ‡∏Ñ‡∏ó‡∏•‡∏µ‡∏¢‡∏≤', '‡πÑ‡∏ó‡∏£‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ', '‡∏Å‡∏±‡∏ô‡πÄ‡∏Å‡∏£‡∏≤',
      '‡∏´‡∏ç‡πâ‡∏≤‡πÅ‡∏ù‡∏Å', '‡∏°‡∏∞‡∏•‡∏¥', '‡∏ä‡∏ß‡∏ô‡∏ä‡∏°', '‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏ô', '‡∏õ‡∏≤‡∏•‡πå‡∏°', '‡∏¢‡∏π‡∏Ñ‡∏≤‡∏•‡∏¥‡∏õ‡∏ï‡∏±‡∏™',
      '‡∏à‡∏≤‡∏°‡∏à‡∏∏‡∏£‡∏µ', '‡∏õ‡∏£‡∏∞‡∏î‡∏π‡πà', '‡∏™‡∏±‡∏Å', '‡∏¢‡∏≤‡∏á‡∏ô‡∏≤', '‡∏ï‡∏∞‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏ô', '‡∏°‡∏∞‡∏Ç‡∏≤‡∏°'
    ];
  }

  private getScientificNames(): string[] {
    return [
      'Monstera deliciosa', 'Ficus lyrata', 'Rosa sp.', 'Echinocactus grusonii',
      'Bambusa vulgaris', 'Ficus microcarpa', 'Philodendron sp.', 'Cattleya sp.',
      'Tectona grandis', 'Vetiveria zizanioides', 'Jasminum sambac', 'Adenium obesum',
      'Nephrolepis exaltata', 'Chamaedorea elegans', 'Eucalyptus globulus',
      'Samanea saman', 'Pterocarpus macrocarpus', 'Tectona grandis', 'Dipterocarpus alatus',
      'Hopea odorata', 'Tamarindus indica'
    ];
  }

  private getSupplierNames(): string[] {
    return [
      '‡∏™‡∏ß‡∏ô‡∏õ‡∏ì‡∏µ‡∏ï‡∏≤', '‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏ß‡∏¢', '‡∏™‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏ó‡∏¢', '‡∏™‡∏ß‡∏ô‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™‡πÑ‡∏ó‡∏¢',
      '‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™‡∏™‡∏ß‡∏¢', '‡∏™‡∏ß‡∏ô‡πÑ‡∏ú‡πà‡πÑ‡∏ó‡∏¢', '‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÑ‡∏ú‡πà‡∏™‡∏ß‡∏¢', '‡∏™‡∏ß‡∏ô‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã‡πÑ‡∏ó‡∏¢',
      '‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã‡∏™‡∏ß‡∏¢', '‡∏™‡∏ß‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ‡πÑ‡∏ó‡∏¢', '‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ‡∏™‡∏ß‡∏¢', '‡∏™‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°‡πÑ‡∏ó‡∏¢',
      '‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°‡∏™‡∏ß‡∏¢', '‡∏™‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô', '‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô‡∏™‡∏ß‡∏¢', '‡∏ï‡∏•‡∏≤‡∏î‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏õ‡∏≤‡∏Å‡∏Ñ‡∏•‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î',
      '‡∏™‡∏ß‡∏ô‡∏Å‡∏∏‡∏´‡∏•‡∏≤‡∏ö‡∏™‡∏≤‡∏¢‡πÑ‡∏´‡∏°', '‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°', '‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£'
    ];
  }

  private generatePhoneNumbers(count: number): string[] {
    const phones: string[] = [];
    for (let i = 0; i < count; i++) {
      const areaCode = ['02', '032', '033', '034', '035', '036', '037', '038', '039', '040'];
      const randomArea = areaCode[Math.floor(Math.random() * areaCode.length)];
      const number = Math.floor(Math.random() * 10000000).toString().padStart(7, '0');
      phones.push(`${randomArea}-${number.slice(0, 3)}-${number.slice(3)}`);
    }
    return phones;
  }

  private generateRandomPrice(range: { min: number; max: number }): number {
    return Math.floor(Math.random() * (range.max - range.min + 1)) + range.min;
  }

  private generateRandomDate(): string {
    const start = new Date(2024, 0, 1);
    const end = new Date();
    const randomTime = start.getTime() + Math.random() * (end.getTime() - start.getTime());
    return new Date(randomTime).toISOString();
  }

  private generateRandomSize(): string {
    const sizes = ['1m', '1.2m', '1.5m', '1.8m', '2m', '2.5m', '3m', '3 ‡∏ô‡∏¥‡πâ‡∏ß', '4 ‡∏ô‡∏¥‡πâ‡∏ß', '6 ‡∏ô‡∏¥‡πâ‡∏ß'];
    return sizes[Math.floor(Math.random() * sizes.length)];
  }

  private getPlantTypeFromCategory(category: string): '‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö' | '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°' | '‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô' | '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å' | '‡πÑ‡∏°‡πâ‡πÉ‡∏ö' | '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™' | '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã' | '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ' {
    const typeMap: Record<string, '‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö' | '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°' | '‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô' | '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å' | '‡πÑ‡∏°‡πâ‡πÉ‡∏ö' | '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™' | '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã' | '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ'> = {
      '‡πÑ‡∏°‡πâ‡πÉ‡∏ö': '‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö',
      '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å': '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å',
      '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°': '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°',
      '‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô': '‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô',
      '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™': '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™',
      '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã': '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã',
      '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ': '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ',
      '‡πÑ‡∏°‡πâ‡πÑ‡∏ú‡πà': '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°'
    };
    return typeMap[category] || '‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö';
  }

  private getMeasurementTypeFromCategory(category: string): '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á' | '‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏≥‡∏ï‡πâ‡∏ô' | '‡∏Ç‡∏ô‡∏≤‡∏î‡∏ñ‡∏∏‡∏á‡∏î‡∏≥' | '‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á' | '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡πà‡∏á' {
    const measurementMap: Record<string, '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á' | '‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏≥‡∏ï‡πâ‡∏ô' | '‡∏Ç‡∏ô‡∏≤‡∏î‡∏ñ‡∏∏‡∏á‡∏î‡∏≥' | '‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á' | '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡πà‡∏á'> = {
      '‡πÑ‡∏°‡πâ‡πÉ‡∏ö': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á',
      '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å': '‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á',
      '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°': '‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏≥‡∏ï‡πâ‡∏ô',
      '‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô': '‡∏Ç‡∏ô‡∏≤‡∏î‡∏ñ‡∏∏‡∏á‡∏î‡∏≥',
      '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™': '‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á',
      '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã': '‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á',
      '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ': '‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á',
      '‡πÑ‡∏°‡πâ‡πÑ‡∏ú‡πà': '‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏≥‡∏ï‡πâ‡∏ô'
    };
    return measurementMap[category] || '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á';
  }
}

// Export singleton instance
export const bulkDataGenerator = BulkDataGenerator.getInstance();
