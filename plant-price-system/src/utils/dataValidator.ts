// üîç Data Validator - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠

import { Plant, Supplier } from '../types';

export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
}

export interface ValidationRule {
  field: string;
  required: boolean;
  type: 'string' | 'number' | 'email' | 'phone' | 'date' | 'array';
  minLength?: number;
  maxLength?: number;
  min?: number;
  max?: number;
  pattern?: RegExp;
  customValidator?: (value: any) => string | null;
}

export class DataValidator {
  private static instance: DataValidator;

  private constructor() {}

  public static getInstance(): DataValidator {
    if (!DataValidator.instance) {
      DataValidator.instance = new DataValidator();
    }
    return DataValidator.instance;
  }

  // üå± ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
  public validatePlant(plant: any): ValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!plant.id || typeof plant.id !== 'string' || plant.id.trim() === '') {
      errors.push('ID ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    if (!plant.name || typeof plant.name !== 'string' || plant.name.trim() === '') {
      errors.push('‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else if (plant.name.length < 2) {
      errors.push('‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
    } else if (plant.name.length > 100) {
      errors.push('‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
    }

    if (!plant.scientificName || typeof plant.scientificName !== 'string' || plant.scientificName.trim() === '') {
      errors.push('‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else if (!this.isValidScientificName(plant.scientificName)) {
      warnings.push('‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    if (!plant.category || typeof plant.category !== 'string' || plant.category.trim() === '') {
      errors.push('‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else if (!this.isValidCategory(plant.category)) {
      warnings.push('‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô');
    }

    if (!plant.plantType || typeof plant.plantType !== 'string' || plant.plantType.trim() === '') {
      errors.push('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else if (!this.isValidPlantType(plant.plantType)) {
      warnings.push('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô');
    }

    if (!plant.measurementType || typeof plant.measurementType !== 'string' || plant.measurementType.trim() === '') {
      errors.push('‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏±‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else if (!this.isValidMeasurementType(plant.measurementType)) {
      warnings.push('‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏±‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö suppliers
    if (!Array.isArray(plant.suppliers)) {
      errors.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Array');
    } else {
      plant.suppliers.forEach((supplier: any, index: number) => {
        const supplierValidation = this.validateSupplier(supplier);
        if (!supplierValidation.isValid) {
          errors.push(`‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà ${index + 1}: ${supplierValidation.errors.join(', ')}`);
        }
        if (supplierValidation.warnings.length > 0) {
          warnings.push(`‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà ${index + 1}: ${supplierValidation.warnings.join(', ')}`);
        }
      });
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }

  // üè™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢
  public validateSupplier(supplier: any): ValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!supplier.id || typeof supplier.id !== 'string' || supplier.id.trim() === '') {
      errors.push('ID ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    if (!supplier.name || typeof supplier.name !== 'string' || supplier.name.trim() === '') {
      errors.push('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else if (supplier.name.length < 2) {
      errors.push('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
    } else if (supplier.name.length > 100) {
      errors.push('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
    }

    if (typeof supplier.price !== 'number' || isNaN(supplier.price)) {
      errors.push('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç');
    } else if (supplier.price < 0) {
      errors.push('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö');
    } else if (supplier.price > 1000000) {
      warnings.push('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    if (!supplier.phone || typeof supplier.phone !== 'string' || supplier.phone.trim() === '') {
      errors.push('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else if (!this.isValidPhone(supplier.phone)) {
      warnings.push('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    if (!supplier.location || typeof supplier.location !== 'string' || supplier.location.trim() === '') {
      errors.push('‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else if (supplier.location.length < 2) {
      errors.push('‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
    }

    if (!supplier.lastUpdated || typeof supplier.lastUpdated !== 'string' || supplier.lastUpdated.trim() === '') {
      errors.push('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else if (!this.isValidDate(supplier.lastUpdated)) {
      warnings.push('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö size (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (supplier.size && typeof supplier.size !== 'string') {
      warnings.push('‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }

  // üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
  public validateBulkData(data: any[]): ValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    if (!Array.isArray(data)) {
      errors.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Array');
      return { isValid: false, errors, warnings };
    }

    if (data.length === 0) {
      errors.push('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
      return { isValid: false, errors, warnings };
    }

    if (data.length > 1000) {
      warnings.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    data.forEach((item, index) => {
      if (!item.plantId || typeof item.plantId !== 'string') {
        errors.push(`‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${index + 1}: plantId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
      }

      if (!item.supplierId || typeof item.supplierId !== 'string') {
        errors.push(`‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${index + 1}: supplierId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
      }

      if (typeof item.newPrice !== 'number' || isNaN(item.newPrice)) {
        errors.push(`‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${index + 1}: newPrice ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç`);
      } else if (item.newPrice < 0) {
        errors.push(`‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${index + 1}: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö`);
      }
    });

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }

  // üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Import
  public validateImportData(data: any): ValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (!data || typeof data !== 'object') {
      errors.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return { isValid: false, errors, warnings };
    }

    if (!data.version || typeof data.version !== 'string') {
      errors.push('‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    if (!data.timestamp || typeof data.timestamp !== 'string') {
      errors.push('‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else if (!this.isValidDate(data.timestamp)) {
      warnings.push('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
    if (data.plants) {
      if (!Array.isArray(data.plants)) {
        errors.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Array');
      } else {
        data.plants.forEach((plant: any, index: number) => {
          const plantValidation = this.validatePlant(plant);
          if (!plantValidation.isValid) {
            errors.push(`‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà ${index + 1}: ${plantValidation.errors.join(', ')}`);
          }
          if (plantValidation.warnings.length > 0) {
            warnings.push(`‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà ${index + 1}: ${plantValidation.warnings.join(', ')}`);
          }
        });
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢
    if (data.suppliers) {
      if (!Array.isArray(data.suppliers)) {
        errors.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Array');
      } else {
        data.suppliers.forEach((supplier: any, index: number) => {
          const supplierValidation = this.validateSupplier(supplier);
          if (!supplierValidation.isValid) {
            errors.push(`‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà ${index + 1}: ${supplierValidation.errors.join(', ')}`);
          }
          if (supplierValidation.warnings.length > 0) {
            warnings.push(`‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà ${index + 1}: ${supplierValidation.warnings.join(', ')}`);
          }
        });
      }
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }

  // üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  public sanitizePlant(plant: any): Plant {
    return {
      id: String(plant.id || '').trim(),
      name: String(plant.name || '').trim(),
      scientificName: String(plant.scientificName || '').trim(),
      category: String(plant.category || '').trim(),
      plantType: this.validatePlantType(String(plant.plantType || '‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö').trim()),
      measurementType: this.validateMeasurementType(String(plant.measurementType || '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á').trim()),
      suppliers: Array.isArray(plant.suppliers) ? 
        plant.suppliers.map((supplier: any) => this.sanitizeSupplier(supplier)) : [],
      hasSuppliers: Array.isArray(plant.suppliers) && plant.suppliers.length > 0
    };
  }

  public sanitizeSupplier(supplier: any): Supplier {
    return {
      id: String(supplier.id || '').trim(),
      name: String(supplier.name || '').trim(),
      price: Number(supplier.price) || 0,
      phone: String(supplier.phone || '').trim(),
      location: String(supplier.location || '').trim(),
      lastUpdated: String(supplier.lastUpdated || new Date().toISOString()).trim(),
      size: supplier.size ? String(supplier.size).trim() : undefined
    };
  }

  // Private helper methods
  private isValidScientificName(name: string): boolean {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå (Genus species)
    const pattern = /^[A-Z][a-z]+ [a-z]+/;
    return pattern.test(name);
  }

  private isValidCategory(category: string): boolean {
    const validCategories = [
      '‡πÑ‡∏°‡πâ‡πÉ‡∏ö', '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å', '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°', '‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô', 
      '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™', '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã', '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ', '‡πÑ‡∏°‡πâ‡πÑ‡∏ú‡πà'
    ];
    return validCategories.includes(category);
  }

  private isValidPlantType(plantType: string): boolean {
    const validTypes = [
      '‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö', '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°', '‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô', '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å', 
      '‡πÑ‡∏°‡πâ‡πÉ‡∏ö', '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™', '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã', '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ'
    ];
    return validTypes.includes(plantType);
  }

  private isValidMeasurementType(measurementType: string): boolean {
    const validTypes = [
      '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á', '‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏≥‡∏ï‡πâ‡∏ô', '‡∏Ç‡∏ô‡∏≤‡∏î‡∏ñ‡∏∏‡∏á‡∏î‡∏≥', '‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡πà‡∏á'
    ];
    return validTypes.includes(measurementType);
  }

  private isValidPhone(phone: string): boolean {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏ó‡∏¢
    const pattern = /^(\+66|0)[0-9]{8,9}$/;
    return pattern.test(phone.replace(/[\s-]/g, ''));
  }

  private isValidDate(dateString: string): boolean {
    const date = new Date(dateString);
    return !isNaN(date.getTime());
  }

  private validatePlantType(plantType: string): '‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö' | '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°' | '‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô' | '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å' | '‡πÑ‡∏°‡πâ‡πÉ‡∏ö' | '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™' | '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã' | '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ' {
    const validTypes: ('‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö' | '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°' | '‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô' | '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å' | '‡πÑ‡∏°‡πâ‡πÉ‡∏ö' | '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™' | '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã' | '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ')[] = [
      '‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö', '‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏≠‡∏°', '‡πÑ‡∏°‡πâ‡∏Ñ‡∏•‡∏∏‡∏°‡∏î‡∏¥‡∏ô', '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å', '‡πÑ‡∏°‡πâ‡πÉ‡∏ö', '‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™', '‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã', '‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ'
    ];
    return validTypes.includes(plantType as any) ? plantType as any : '‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö';
  }

  private validateMeasurementType(measurementType: string): '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á' | '‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏≥‡∏ï‡πâ‡∏ô' | '‡∏Ç‡∏ô‡∏≤‡∏î‡∏ñ‡∏∏‡∏á‡∏î‡∏≥' | '‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á' | '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡πà‡∏á' {
    const validTypes: ('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á' | '‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏≥‡∏ï‡πâ‡∏ô' | '‡∏Ç‡∏ô‡∏≤‡∏î‡∏ñ‡∏∏‡∏á‡∏î‡∏≥' | '‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á' | '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡πà‡∏á')[] = [
      '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á', '‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏≥‡∏ï‡πâ‡∏ô', '‡∏Ç‡∏ô‡∏≤‡∏î‡∏ñ‡∏∏‡∏á‡∏î‡∏≥', '‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡πà‡∏á'
    ];
    return validTypes.includes(measurementType as any) ? measurementType as any : '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á';
  }
}

// Export singleton instance
export const dataValidator = DataValidator.getInstance();
